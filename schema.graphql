type Comptroller @entity {
    id: ID!                                 # 1
    priceOracle: Bytes                      # price oracle address that comptroller uses
    closeFactor: BigInt                     # factor used to determine repayAmount for liquidating
    liquidationIncentive: BigInt            # extra % liquidators save for liqudation a user
    maxAssets: BigInt                       # max assets a single user can enter
}

type Market @entity {
    id: ID!                                 # cToken Address
    underlyingAddress: Bytes!               # underlying token address (eth is 0x0000)
    underlyingDecimals: Int!                # undelying decimals
    symbol: String!                         # cDAI, cBAT, etc.
    accrualBlockNumber: Int!                # block number the market is updated to
    tokenPerEthRatio: BigDecimal!           # 0.007 DAI/ETH would mean 142.86 DAI = 1 ETH
    tokenPerUSDRatio: BigDecimal!           # 19 would mean 1 REP = 19 USD

    totalSupply: BigDecimal!                # cToken total supply. CTokens have 8 decimal points
    exchangeRate:  BigDecimal!              # exchangeRate = (totalCash + totalBorrows - totalReserves) / totalSupply
    totalReserves: BigDecimal!              # teserves accrue by shaving off a small percentage of all borrow interest
    totalDeposits: BigDecimal               # the total lending of erc20 or eth given to this contract
    perBlockSupplyInterest: BigDecimal!     # PBSI = totalBorrows * borrowRatePerBock * (1-reserveFactor) / (totalSupply * exchangeRate). Supply APR = PRSI * 2102400. Derived from borrow interest

    totalCash: BigDecimal                   # the contracts balance of ERC20 or ETH
    totalBorrows: BigDecimal!               # total borrows for the market
    perBlockBorrowInterest: BigDecimal!     # to get Annual Percent Return (APR) : perBlockBorrowInterest * 2102400
    borrowIndex: BigDecimal!                # the history of the markets borrow index return since inception. (Think S&P 500)

    reserveFactor: BigInt!                  # the % of interest earned that goes to the reserves

    # Created by Comptroller events
    usersEntered: [Bytes!]!                 # users who have entered this market
    collateralFactor: BigDecimal            # factor for the most one can borrow in this market
}

# the following vaules are added by the JS wrapper: (TODO - still needs to be implemented)
    # accountLiquidity
    # availableToBorrowEth
type User @entity {
    id: ID!                                                 # user eth address
    cTokens: [CTokenInfo!]! @derivedFrom(field: "user")     # array of CTokenInfo for user
    totalSupplyInEth: BigDecimal!                           # total assets supplied by user
    totalBorrowInEth: BigDecimal!                           # total assets borrowed from user
    countLiquidated: Int!                                   # times this account has been liquidated
    countLiquidator: Int!                                   # times this account has liquidated others
    hasBorrowed: Boolean!                                   # true if user has ever borrowed
}

# CToken stats for a single users borrow and supply of an asset
# The following values are added by the JS Wrapper:
    # unrealizedLendBalance
    # unrealizedSupplyInterest
    # unrealizedBorrowBalance
    # unrealizedBorrowInterest
type CTokenInfo @entity {
    id: ID!                                 # concatenation of the asset name and user eth address (i.e. cDAI-0xdA5d.......)
    market: Market!                         # market
    symbol: String!                         # symbol of underlying token
    user: User!                             # user address for one-to-many relationships
    transactionHashes: [Bytes!]!            # tx hash of all tx's
    transactionTimes: [Int!]!               # tx time of all tx's
    accrualBlockNumber: Int!                # block number the user balances are updated to

    cTokenBalance: BigDecimal!              # total ctokens the user owns of this asset (CTOKEN)
    totalUnderlyingSupplied: BigDecimal!    # total amount the user has supplied of the underlying (ERC20/ETH)
    totalUnderlyingRedeemed: BigDecimal!    # total amount the user has redeemed of the underlying (ERC20/ETH)
    userBorrowIndex: BigDecimal!            # the value of the borrowIndex upon users last borrow interaction
    totalUnderlyingBorrowed: BigDecimal!    # total borrow, exclusive of interest (ERC20/ETH)
    totalUnderlyingRepaid: BigDecimal!      # total repaid (ERC20/ETH)

    ### these values are only up to date to the last event the user interacted with, and shouldn't be displayed in a dapp. Display unrealized values to users
    ### realizedLendBalance and realizedBorrowBalance are what are stored in the smart contract
    ### these are all in units of underlying token
    realizedLendBalance: BigDecimal!        # realizedLendBalance =  cTokenBalance * market.exchangeRate
    realizedSupplyInterest: BigDecimal!     # realizedSupplyInterest = realizedLendBalance - underlyingSupplied + underlyingRedeemed
    realizedBorrowBalance: BigDecimal!      # realizedBorrowBalance = previousRealizedBorrowBalance * market.borrowIndexLatest / userBorrowIndex
    realizedBorrowInterest: BigDecimal!     # realizedBorrowInterest = realizedBorrowBalance - underlyingBorrowed + underlyingRepaid
}