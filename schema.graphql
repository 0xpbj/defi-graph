# TODO - add in comments for all the fields, so they show up in the explorer
type Comptroller @entity {
    id: ID!                                 # 1
    priceOracle: Bytes                      # price oracle address that comptroller uses
    closeFactor: BigInt                     # factor used to determine repayAmount for liquidating
    liquidationIncentive: BigInt            # extra % liquidators save for liqudation a user
    maxAssets: BigInt                       # max assets a single user can enter
}

# Market inforamtion for a CToken
type Market @entity {
    id: ID!                                 # cToken Address
    underlyingAddress: Bytes!               # underlying token address (eth is 0x0000)
    underlyingDecimals: Int!                # undelying decimals
    symbol: String!                         # cDAI, cBAT, etc.
    accrualBlockNumber: Int!                # block number the market is updated to on ethereum
    tokenPerEthRatio: BigDecimal!           # 0.007 DAI/ETH would mean 142.86 DAI = 1 ETH
    tokenPerUSDRatio: BigDecimal!           # 19 would mean 1 REP = 19 USD
    reserveFactor: BigInt!                  # the % of interest earned that goes to the reserves
    interestRateModelAddress: Bytes!        # Address of the interest rate model

    totalSupply: BigDecimal!                # cToken total supply. CTokens have 8 decimal points
    exchangeRate:  BigDecimal!              # exchangeRate = (totalCash + totalBorrows - totalReserves) / totalSupply
    totalReserves: BigDecimal!              # reserves accrue by shaving off a small percentage of all borrow interest
    totalDeposits: BigDecimal               # the total lending of erc20 or eth given to this contract
    supplyRate: BigDecimal!                 # to get the per block rate, divide by 2102400

    totalCash: BigDecimal                   # the contracts balance of ERC20 or ETH
    totalBorrows: BigDecimal!               # total borrows for the market
    borrowRate: BigDecimal!                 # to get the per block rate, divide by 2102400
    borrowIndex: BigDecimal!                # the history of the markets borrow index return since inception. (Think S&P 500)

    # Created by Comptroller events
    usersEntered: [Bytes!]!                 # users who have entered this market
    collateralFactor: BigDecimal            # factor for the most one can borrow in this market
}

# All data for a user interacting with the protocol
type User @entity {
    id: ID!                                                 # user eth address
    cTokens: [CTokenInfo!]! @derivedFrom(field: "user")     # array of CTokenInfo for user
    countLiquidated: Int!                                   # times this account has been liquidated
    countLiquidator: Int!                                   # times this account has liquidated others
    hasBorrowed: Boolean!                                   # true if user has ever borrowed

    # The following values are added by the JS Wrapper, and must be calculated with the most up
    # to date values based on the block delta for market.exchangeRate and market.borrowIndex
    # They do not need to be in the schema, but they will show up in the explorer playground
    #    health: BigDecimal!                                     # If less than 1, the account can be liquidated
    #    total_borrow_value_in_eth: BigDecimal!                  # total assets supplied by user
    #    tota_collateral_value_in_eth: BigDecimal!               # total assets borrowed from user
}

# CToken stats for a single users borrow and supply of an asset
type CTokenInfo @entity {
    id: ID!                                 # concatenation of the asset name and user eth address (i.e. cDAI-0xdA5d.......)
    market: Market!                         # market
    symbol: String!                         # symbol of underlying token
    user: User!                             # user address for one-to-many relationships
    transactionHashes: [Bytes!]!            # tx hash of all tx's
    transactionTimes: [Int!]!               # tx time of all tx's
    accrualBlockNumber: Int!                # block number the user balances are updated to

    cTokenBalance: BigDecimal!              # total ctokens the user owns of this asset (CTOKEN)
    totalUnderlyingSupplied: BigDecimal!    # total amount the user has supplied of the underlying (ERC20/ETH)
    totalUnderlyingRedeemed: BigDecimal!    # total amount the user has redeemed of the underlying (ERC20/ETH)
    userBorrowIndex: BigDecimal!            # the value of the borrowIndex upon users last borrow interaction
    totalUnderlyingBorrowed: BigDecimal!    # total borrow, exclusive of interest (ERC20/ETH)
    totalUnderlyingRepaid: BigDecimal!      # total repaid (ERC20/ETH)
    storedBorrowBalance: BigDecimal!       # The account borrows total emitted in Borrow or Repay events

    # The following values are added by the JS Wrapper, and must be calculated with the most up
    # to date values based on the block delta for market.exchangeRate and market.borrowIndex
    # They do not need to be in the schema, but they will show up in the explorer playground
        # lendBalance: BigDecimal!        # lendBalance =  cTokenBalance * market.exchangeRate
        # supplyInterest: BigDecimal!     # supplyInterest = lendBalance - totalUnderlyingSupplied + totalUnderlyingRedeemed
        # borrowBalance: BigDecimal!      # borrowBalance = storedAccountBorrows * market.borrowIndex / userBorrowIndex
        # borrowInterest: BigDecimal!     # borrowInterest = borrowBalance - totalUnderlyingBorrowed + totalUnderlyingRepaid
}