# Comptroller global variables
type Comptroller @entity {
    "ID is set to 1"
    id: ID!
    "Address of price oracle the comptroller uses"
    priceOracle: Bytes
    "Factor used to determine repayAmount for liquidating"
    closeFactor: BigInt
    "The percent bonus liquidators get for liquidating"
    liquidationIncentive: BigInt
    "Max assets a single user can enter"
    maxAssets: BigInt
}

# Market inforamtion for a CToken
type Market @entity { # TODO rename to CToken, not market
    #Fields that match compounds API
    "Yearly borrow rate. With 2102400 blocks per year"
    borrowRate: BigDecimal!
    "The cToken contract balance of ERC20 or ETH"
    cash: BigDecimal
    "Collateral factor determining how much one can borrow"
    collateralFactor: BigDecimal
    "Exchange rate of tokens / cTokens"
    exchangeRate:  BigDecimal!
    "Address of the interest rate model"
    interestRateModelAddress: Bytes!
    "Name of the cToken"
    name: String!
    "Number of borrowers active in the market"
    numberOfBorrowers: Int!
    "Number of suppliers active in the market"
    numberOfSuppliers: Int!
    "Reserves stored in the contract"
    reserves: BigDecimal!
    "Yearly supply rate. With 2104400 blocks per year"
    supplyRate: BigDecimal!
    "CToken symbol"
    symbol: String!
    "CToken address"
    id: ID!
    "Borrows in the market"
    totalBorrows: BigDecimal!
    "CToken supply. CTokens have 8 decimals"
    totalSupply: BigDecimal!
    "Underlying token address"
    underlyingAddress: Bytes!
    "Underlying token name"
    underlyingName: String!
    "Underlying price of token in ETH (ex. 0.007 DAI)"
    underlyingPrice: BigDecimal!
    "Underlying token symbol"
    underlyingSymbol: String!

    # Fields that are not in compounds api
    "Block the market is updated to"
    accrualBlockNumber: Int!
    "Timestamp the market was most recently updated"
    blockTimestamp: Int!
    "The history of the markets borrow index return (Think S&P 500)"
    borrowIndex: BigDecimal!
    "The factor determining interest that goes to reserves"
    reserveFactor: BigInt!
    "Underlying token price in USD"
    underlyingPriceUSD: BigDecimal!
    "Underlying token decimal length"
    underlyingDecimals: Int!
}

# Users within the protocol
type User @entity {
    "User ETH address"
    id: ID!
    "Array of CTokens user is in"
    cTokens: [CTokenInfo!]! @derivedFrom(field: "user")
    "Count user has been liquidated"
    countLiquidated: Int!
    "Count user has liquidated others"
    countLiquidator: Int!
    "True if user has ever borrowed"
    hasBorrowed: Boolean!

    # The following values are added by the JS Wrapper, and must be calculated with the most up
    # to date values based on the block delta for market.exchangeRate and market.borrowIndex
    # They do not need to be in the schema, but they will show up in the explorer playground

    # health: BigDecimal!                                 # If less than 1, the account can be liquidated
    # totalBorrowValueInEth: BigDecimal!                  # total assets supplied by user
    # totalCollateralValueInEth: BigDecimal!              # total assets borrowed from user
}

# Stats for a users borrow and supply of an asset
type CTokenInfo @entity {
    "Concatenation of CToken address and user address"
    id: ID!
    "Relation to market"
    market: Market!
    "Symbol of underlying token"
    symbol: String!
    "Relation to user"
    user: User!
    "Hashes of all user transactions"
    transactionHashes: [Bytes!]!
    "Times of all user transactions"
    transactionTimes: [Int!]!
    "Block number this asset was updated at in the contract"
    accrualBlockNumber: Int!
    "True if user is entered, false if they are exited"
    enteredMarket: Boolean

    "CToken balance of the user"
    cTokenBalance: BigDecimal!
    "Total amount of underlying supplied"
    totalUnderlyingSupplied: BigDecimal!
    "Total amount of underling redeemed"
    totalUnderlyingRedeemed: BigDecimal!
    "The value of the borrow index upon users last interaction"
    userBorrowIndex: BigDecimal!
    "Total amount underlying borrowed, exclusive of interest"
    totalUnderlyingBorrowed: BigDecimal!
    "Total amount underlying repaid"
    totalUnderlyingRepaid: BigDecimal!
    "Current borrow balance stored in contract (exclusive of interest since accrualBlockNumber)"
    storedBorrowBalance: BigDecimal!

    # The following values are added by the JS Wrapper, and must be calculated with the most up
    # to date values based on the block delta for market.exchangeRate and market.borrowIndex
    # They do not need to be in the schema, but they will show up in the explorer playground

    # lendBalance: BigDecimal!        # lendBalance =  cTokenBalance * market.exchangeRate
    # supplyInterest: BigDecimal!     # supplyInterest = lendBalance - totalUnderlyingSupplied + totalUnderlyingRedeemed
    # borrowBalance: BigDecimal!      # borrowBalance = storedAccountBorrows * market.borrowIndex / userBorrowIndex
    # borrowInterest: BigDecimal!     # borrowInterest = borrowBalance - totalUnderlyingBorrowed + totalUnderlyingRepaid
}